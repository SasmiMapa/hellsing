import os
import re
import subprocess

from lib.core.Config import RESULTS_DIR
from lib.output.Logger import logger  
from lib.output import Output
from lib.utils.StringUtils import StringUtils

class ExploitOperations:
    def __init__(self):
        pass
    
    #-----------------------------------------------------------------------
    
    def please_exploit_tool(self, command, tool_name, check_name):
         
        try:
            if check_name == "hydra-http-post-form-brute":
                # asking user input whether they want to launch burpesuite or not
                burpsuite_decision = input(f"\033[1m[>] Would you like to launch Burpsuite to get the request string? (Y/n): \033[0m")
                if burpsuite_decision.lower() == 'y':
                    burp_proc = subprocess.run(["burpsuite"])
                else:
                    # pass
                
                    # hydra_post_form_inputs.txt exist ask the user whether they wanna import those inputs
                    if os.path.exists("results/hydra_post_form_inputs.txt"):
                        import_decision = input(f"\033[1m[>] Would you like to import the previous inputs? (Y/n): \033[0m")
                        
                        print("\n")
                        if import_decision.lower() == 'y':
                            with open("results/hydra_post_form_inputs.txt", "r") as file:
                                lines = file.readlines()
                                request_header_save = lines[0].split(" ")[1].strip()
                                username_field_save = lines[1].split(" ")[1].strip()
                                password_field_save = lines[2].split(" ")[1].strip()
                                response_string_save = lines[3].split(" ")[1].strip()
                                
                                logger.info(f"Request header imports:")
                                logger.info(f"Request header: {request_header_save}")
                                logger.info(f"Username field: {username_field_save}")
                                logger.info(f"Password field: {password_field_save}")
                                logger.info(f"Response string: {response_string_save}")
                        else:
                            logger.info(f"Please provide the necessary inputs for the Hydra brute force:")
                            request_header  = input("\033[1m[>] Enter the request header (e.g., /Login.asp?): \033[0m")
                            username_field = input("\033[1m[>] Enter the user name field (e.g., username): \033[0m")
                            password_field  = input("\033[1m[>] Enter the password field (e.g., password): \033[0m")
                            response_string = input("\033[1m[>] Enter the response string for fail logins (e.g., F=Invalid login!): \033[0m")
                    
                            # results_file_path = os.path.join(RESULTS_DIR, f"{tool}_results.txt")
                            hydra_results_file_path = os.path.join(RESULTS_DIR, f"hydra_post_form_inputs.txt")
                            
                            with open(hydra_results_file_path, "w") as file:
                                file.write(f"[REQUEST_HEADER] {request_header}\n")
                                file.write(f"[USERNAME_FIELD] {username_field}\n")
                                file.write(f"[PASSWORD_FIELD] {password_field}\n")
                                file.write(f"[RESPONSE_STRING] {response_string}\n")    
                                
                    else:
                        logger.info(f"Please provide the necessary inputs for the Hydra brute force:")
                        request_header  = input("\033[1m[>] Enter the request header (e.g., /Login.asp?): \033[0m")
                        username_field = input("\033[1m[>] Enter the user name field (e.g., username): \033[0m")
                        password_field  = input("\033[1m[>] Enter the password field (e.g., password): \033[0m")
                        response_string = input("\033[1m[>] Enter the response string for fail logins (e.g., F=Invalid login!): \033[0m")
                
                        # results_file_path = os.path.join(RESULTS_DIR, f"{tool}_results.txt")
                        hydra_results_file_path = os.path.join("results", f"hydra_post_form_inputs.txt")
                        
                        with open(hydra_results_file_path, "w") as file:
                            file.write(f"[REQUEST_HEADER] {request_header}\n")
                            file.write(f"[USERNAME_FIELD] {username_field}\n")
                            file.write(f"[PASSWORD_FIELD] {password_field}\n")
                            file.write(f"[RESPONSE_STRING] {response_string}\n")
                    
            # elif check_name == "medusa":
            #     pass
            
            # else:
            #     pass
                
        except Exception as e:
            logger.error(f"Error: {e}")
            
        finally:
            if "[REQUEST_HEADER]" in command:
                command = command.replace("[REQUEST_HEADER]", request_header)
            
            if "[USERNAME_FIELD]" in command:
                command = command.replace("[USERNAME_FIELD]", username_field)
                
            if "[PASSWORD_FIELD]" in command:
                command = command.replace("[PASSWORD_FIELD]", password_field)
                
            if "[RESPONSE_STRING]" in command:
                command = command.replace("[RESPONSE_STRING]", response_string)
            
        return command

    #-----------------------------------------------------------------------