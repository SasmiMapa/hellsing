import os
import re
import subprocess

from lib.core.Config import RESULTS_DIR
from lib.output.Logger import logger  
from lib.output import Output
from lib.utils.StringUtils import StringUtils

class ExploitOperations:
    def __init__(self):
        pass
    
    #-----------------------------------------------------------------------
    
    def please_exploit_tool(self, command, tool_name, check_name):
        # Initialize variables to ensure they are defined
        request_header = username_field = password_field = response_string = None

        try:
            if check_name == "hydra-http-post-form-brute":
                burpsuite_decision = input(f"\033[1m[>] Would you like to launch Burpsuite to get the request string? (Y/n): \033[0m")
                if burpsuite_decision.lower() == 'y':
                    subprocess.run(["burpsuite"])
                else:
                    # Check if hydra_post_form_inputs.txt exists
                    hydra_inputs_path = os.path.join(RESULTS_DIR, "hydra_post_form_inputs.txt")
                    
                    if os.path.exists(hydra_inputs_path):
                        # First, display the previous inputs
                        with open(hydra_inputs_path, "r") as file:
                            lines = file.readlines()
                            request_header_display = lines[0].strip().split(" ", 1)[1]
                            username_field_display = lines[1].strip().split(" ", 1)[1]
                            password_field_display = lines[2].strip().split(" ", 1)[1]
                            response_string_display = lines[3].strip().split(" ", 1)[1]
                        
                        print("\n")
                        logger.info(f"Previous inputs found:")
                        logger.success(f"Request header  : {request_header_display}")
                        logger.success(f"Username        : {username_field_display}")
                        logger.success(f"Password        : {password_field_display}")
                        logger.success(f"Response string : {response_string_display}")
                        print("\n")
                        
                        # Then ask if the user wants to import them
                        import_decision = input(f"\033[1m[>] Would you like to import the previous inputs? (Y/n): \033[0m")
                        print("\n")
                        if import_decision.lower() == 'y':
                            request_header = request_header_display
                            username_field = username_field_display
                            password_field = password_field_display
                            response_string = response_string_display

                    # Prompt for inputs if not importing or no previous inputs
                    if not request_header:
                        request_header = input("\033[1m[>] Enter the request header (e.g., Login.asp?): \033[0m")
                        username_field = input("\033[1m[>] Enter the user name field (e.g., username): \033[0m")
                        password_field = input("\033[1m[>] Enter the password field (e.g., password): \033[0m")
                        response_string = input("\033[1m[>] Enter the response string for fail logins (e.g., F=Invalid login!): \033[0m")

                        # Save inputs for future use
                        with open(hydra_inputs_path, "w") as file:
                            file.write(f"[REQUEST_HEADER] {request_header}\n")
                            file.write(f"[USERNAME_FIELD] {username_field}\n")
                            file.write(f"[PASSWORD_FIELD] {password_field}\n")
                            file.write(f"[RESPONSE_STRING] {response_string}\n")
                            
        except Exception as e:
            logger.error(f"Error: {e}")
            
        finally:
            # Ensure variables are defined before replacing in command
            if request_header and username_field and password_field and response_string:
                if "[REQUEST_HEADER]" in command:
                    command = command.replace("[REQUEST_HEADER]", request_header)
                if "[USERNAME_FIELD]" in command:
                    command = command.replace("[USERNAME_FIELD]", username_field)
                if "[PASSWORD_FIELD]" in command:
                    command = command.replace("[PASSWORD_FIELD]", password_field)
                if "[RESPONSE_STRING]" in command:
                    command = command.replace("[RESPONSE_STRING]", response_string)
                    
            return command
    #-----------------------------------------------------------------------