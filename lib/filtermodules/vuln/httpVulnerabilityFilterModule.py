import re

class httpVulnerabilityFilterModule:
    def __init__(self):
        self.vulnerabilities = []

    def add_vulnerability(self, name, cve, status):
        """
        Adds a new vulnerability to the list if it's not already present based on CVE.
        """
        for vuln in self.vulnerabilities:
            if vuln['cve'] == cve:
                return  # CVE already recorded, avoid duplication
        
        severity = "High" if "potentially VULNERABLE" in status else "Low"
        description = f""
        recommendation = "Please consult the CVE database or vendor for mitigation measures."
        self.vulnerabilities.append({
            "name": name,
            "cve": cve,
            "status": status,
            "severity": severity,
            "description": description,
            "recommendation": recommendation
        })

    #------------------------------------------------------------------------------------

    # parse the output of testssl.sh
    def parse_testssl_output(self, output):
        vulnerability_pattern = re.compile(r'^(.+?)\s+\((CVE-\d{4}-\d{4,})\),?\s*(not vulnerable|potentially VULNERABLE|.+OK.+|.+Check.+)$', re.IGNORECASE)

        current_section = None
        
        for line in output.split("\n"):
            # Check for section headers
            if "Testing vulnerabilities" in line:
                current_section = "Vulnerabilities"
                continue

            # Process based on current section
            if current_section == "Vulnerabilities":
                vuln_match = vulnerability_pattern.search(line)
                
                if vuln_match:
                    name = vuln_match.group(1).strip()
                    cve = vuln_match.group(2)
                    status = vuln_match.group(3)

                    # Normalize status to include cases where "OK" implies not vulnerable
                    if not "not vulnerable" in status and not "OK" in status:
                        if "vulnerable" in status:
                            status = "VULNERABLE"
                        elif "potentially" in status:
                            status = "potentially VULNERABLE"
                        self.add_vulnerability(name=name, cve=cve, status=status)
                        
        return self.vulnerabilities

    #------------------------------------------------------------------------------------