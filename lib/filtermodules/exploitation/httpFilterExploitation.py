import re

class httpFilterExploitation:
    def __init__(self):
        self.results = []
        
    #------------------------------------------------------------------------------------
    
    # filter hydra output
    def parse_hydra_output(self, output):
        """
        Parses the output of the Hydra tool to extract the cracked password.
        """
        pattern = r"\[\d+\]\[http-post-form\] host: ([^\s]+)\s+login: ([^\s]+)\s+password: ([^\s]+)"
        match = re.search(pattern, output)
        
        if match:
            return {
                "Host": match.group(1),
                "Login": match.group(2),
                "Password": match.group(3)
                }
        else:
            return None
        
    #------------------------------------------------------------------------------------
    
    def parse_sqlmap_db_scan_output(self, output):
        """
        Parses the output of the SQLMap tool to extract the database scan results.
        """
        databases_section = re.search(r"available databases \[\d+\]:\n(\[\*\] .+\n)+", output)
        
        if databases_section:
            # If the databases section is found, extract only the database names
            pattern = r"\[\*\] (.+)"
            return re.findall(pattern, databases_section.group(0))
        else:
            return []
        
    #------------------------------------------------------------------------------------
    
    def parse_sqlmap_table_dump_output(self, output):
        """
        Parses the output of the SQLMap tool to extract the table dump results.
        """
        tables = re.findall(r'\|\s+(\w+)\s+\|', output)
        
        if tables:
            return tables
        
        
    #------------------------------------------------------------------------------------
    
    def parse_sqlmap_column_dump_output(self, output):
        """
        Parses the output of the SQLMap tool to extract the column dump results.
        """
        # Define the regex pattern to match the database and table names
        db_table_pattern = re.compile(r"Database: (.+?)\s+Table: (.+?)\s*$", re.MULTILINE)
        
        # Storage for results
        results = {}
        
        # Split the output into lines for processing
        lines = output.splitlines()
        
        # Iterate over each line, looking for database and table declarations
        for i, line in enumerate(lines):
            db_table_match = db_table_pattern.search(line)
            print(db_table_match)
            if db_table_match:
                db_name, table_name = db_table_match.groups()
                # Start capturing column names after the "Table:" line until the next "Database:" or end of relevant section
                column_section = '\n'.join(lines[i+1:])  # Get all lines after the current one
                column_entries_start = column_section.find('+---')  # Column entries start after the first table border
                column_entries_end = column_section.find('\n\n')  # Assume section ends at the first double newline
                column_section_relevant = column_section[column_entries_start:column_entries_end if column_entries_end != -1 else None]
                
                # Extract column names from the relevant section
                column_names = re.findall(r'\|\s*([^|]+?)\s*\|', column_section_relevant)
                # Filter out non-column name entries and duplicates
                column_names = [name for name in column_names if not name.startswith('+') and column_names.count(name) == 1]
                
                results[(db_name, table_name)] = column_names

        return results
    